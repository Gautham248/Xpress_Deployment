// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Xpress_backend_V2.Data;

#nullable disable

namespace Xpress_backend_V2.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250605054649_Authentication_Test_Final")]
    partial class Authentication_Test_Final
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Xpress_backend_V2.Models.AadharDoc", b =>
                {
                    b.Property<int>("AadharId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AadharId"));

                    b.Property<string>("AadharName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AadharId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("AadharDocs");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.Airline", b =>
                {
                    b.Property<int>("AirlineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AirlineId"));

                    b.Property<double>("AirlineExpense")
                        .HasColumnType("double precision");

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AirlineId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("NewStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("OldStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LogId");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("NotificationTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.PassportDoc", b =>
                {
                    b.Property<int>("PassportDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PassportDocId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuingCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PassportDocId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("PassportDocs");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.RMT", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("DuHeadEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DuHeadName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DuId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ProjectEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectManagerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectCode")
                        .IsUnique();

                    b.ToTable("RMTs");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.RequestStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StatusId");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TicketOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<string>("OptionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OptionId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RequestId");

                    b.ToTable("TicketOptions");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TravelMode", b =>
                {
                    b.Property<int>("TravelModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TravelModeId"));

                    b.Property<string>("TravelModeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TravelModeId");

                    b.ToTable("TravelModes");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TravelRequest", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<int?>("AirlineId")
                        .HasColumnType("integer");

                    b.Property<bool>("AttendedCCT")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("DestinationCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DropOffPlace")
                        .HasColumnType("text");

                    b.Property<string>("FoodComment")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccommodationRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDropOffRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPickUpRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRoundTrip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("boolean");

                    b.Property<string>("LDCertificatePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("OutboundArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OutboundDepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PickUpPlace")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PurposeOfTravel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SelectedTicketOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourcePlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TicketDocumentPath")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalExpense")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TravelAgencyExpense")
                        .HasColumnType("numeric");

                    b.Property<string>("TravelAgencyName")
                        .HasColumnType("text");

                    b.Property<int>("TravelModeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("ProjectCode");

                    b.HasIndex("SelectedTicketOptionId");

                    b.HasIndex("TravelModeId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.UserNotification", b =>
                {
                    b.Property<int>("UserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserNotificationId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserNotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.VisaDoc", b =>
                {
                    b.Property<int>("VisaDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VisaDocId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuingCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VisaClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VisaNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VisaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VisaDocId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("VisaDocs");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.AadharDoc", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.User", "CreatedByUser")
                        .WithMany("CreatedAadharDocs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("AadharDocs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.AuditLog", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.RequestStatus", "NewStatus")
                        .WithMany("NewAuditLogs")
                        .HasForeignKey("NewStatusId");

                    b.HasOne("Xpress_backend_V2.Models.RequestStatus", "OldStatus")
                        .WithMany("OldAuditLogs")
                        .HasForeignKey("OldStatusId");

                    b.HasOne("Xpress_backend_V2.Models.TravelRequest", "TravelRequest")
                        .WithMany("AuditLogs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewStatus");

                    b.Navigation("OldStatus");

                    b.Navigation("TravelRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.Notification", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.User", "CreatedByUser")
                        .WithMany("CreatedNotifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.PassportDoc", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.User", "CreatedByUser")
                        .WithMany("CreatedPassportDocs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("PassportDocs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TicketOption", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.User", "CreatedByUser")
                        .WithMany("CreatedTicketOptions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.TravelRequest", "TravelRequest")
                        .WithMany("TicketOptions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("TravelRequest");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TravelRequest", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.Airline", "Airline")
                        .WithMany("TravelRequests")
                        .HasForeignKey("AirlineId");

                    b.HasOne("Xpress_backend_V2.Models.RequestStatus", "CurrentStatus")
                        .WithMany("TravelRequests")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.RMT", "Project")
                        .WithMany("TravelRequests")
                        .HasForeignKey("ProjectCode")
                        .HasPrincipalKey("ProjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.TicketOption", "SelectedTicketOption")
                        .WithMany("SelectedByTravelRequests")
                        .HasForeignKey("SelectedTicketOptionId");

                    b.HasOne("Xpress_backend_V2.Models.TravelMode", "TravelMode")
                        .WithMany("TravelRequests")
                        .HasForeignKey("TravelModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("TravelRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("CurrentStatus");

                    b.Navigation("Project");

                    b.Navigation("SelectedTicketOption");

                    b.Navigation("TravelMode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.UserNotification", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.VisaDoc", b =>
                {
                    b.HasOne("Xpress_backend_V2.Models.User", "CreatedByUser")
                        .WithMany("CreatedVisaDocs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xpress_backend_V2.Models.User", "User")
                        .WithMany("VisaDocs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.Airline", b =>
                {
                    b.Navigation("TravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.RMT", b =>
                {
                    b.Navigation("TravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.RequestStatus", b =>
                {
                    b.Navigation("NewAuditLogs");

                    b.Navigation("OldAuditLogs");

                    b.Navigation("TravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TicketOption", b =>
                {
                    b.Navigation("SelectedByTravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TravelMode", b =>
                {
                    b.Navigation("TravelRequests");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.TravelRequest", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("TicketOptions");
                });

            modelBuilder.Entity("Xpress_backend_V2.Models.User", b =>
                {
                    b.Navigation("AadharDocs");

                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedAadharDocs");

                    b.Navigation("CreatedNotifications");

                    b.Navigation("CreatedPassportDocs");

                    b.Navigation("CreatedTicketOptions");

                    b.Navigation("CreatedVisaDocs");

                    b.Navigation("PassportDocs");

                    b.Navigation("TravelRequests");

                    b.Navigation("UserNotifications");

                    b.Navigation("VisaDocs");
                });
#pragma warning restore 612, 618
        }
    }
}
